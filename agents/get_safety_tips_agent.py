import re 
import json 
from langchain.agents import initialize_agent, AgentType # type: ignore 
from langchain.tools import tool # type: ignore 
from llm import llm # type: ignore 

emergency_tips = {
    "CIVIL": [
        "التزم بمكان آمن بعيد عن النوافذ أو الأشجار.",
        "استلقي على الأرض وغطي رأسك لحمايتك من الأشياء المتساقطة.",
        "ابحث عن ملجأ آمن داخل المنزل.",
        "افصل الكهرباء والمياه إذا أمكن.",
        "لا تحاول عبور الطرق المغمورة بالمياه.",
        "إذا كنت في السيارة، توقف بعيداً عن المباني والأشجار وابقَ داخل السيارة.",
        "تجنب ملامسة الأسلاك أو المياه المكشوفة.",
        "لا تقترب من المباني المتصدعة أو المهددة بالانهيار.",
        "حذر الآخرين في المنطقة إذا وُجد خطر مباشر.",
        "تجنب لمس أي مواد أو معدات مشتبه بها.",
        "التقط صورًا أو مقاطع فيديو للمنطقة المتضررة.",
        "ابقَ قريبًا من موقع آخر مشاهدة للشخص المفقود.",
        "قم بتقديم الإسعافات الأولية الأساسية إذا كنت مدربًا على ذلك، أو اتصل بالجهات المختصة.",
        "قدم الدعم النفسي والمعنوي للمتضررين وطمأنهم.",
        "لا تنشر معلومات الشخص المفقود قبل التنسيق مع الجهات الرسمية.",
        "إذا كان هناك خطر مباشر، ابحث عن مكان آمن للاختباء أو الإيواء.",
        "تأكد من تشغيل أضواء التحذير (الفلشر) لتنبيه السيارات القادمة.",
        "قم بإطفاء محرك السيارة لمنع نشوب حريق.",
        "لا تحاول نقل المصابين ما لم يكن هناك خطر مباشر.",
        "ابقَ في مكان آمن بعيدًا عن الطريق إذا كنت قادرًا.",
        "إذا أمكن، قم بتوثيق الحادث بالصور أو مقاطع الفيديو."
    ],
    "FIRE": [
        "حاول الحفاظ على هدوئك قدر الإمكان لاتخاذ قرارات سليمة.",
        "ابتعد فورًا عن مصدر الحريق.",
        "إذا كان الدخان كثيفًا، انحني وتجنب استنشاق الدخان.",
        "أسرع بإخلاء المبنى أو المنطقة المصابة، مع الحرص على عدم استخدام المصاعد.",
        "لا تحاول إطفاء الحريق الكبير بنفسك.",
        "أغلق مصادر الغاز أو الكهرباء إذا كان ذلك آمنًا.",
        "ابتعد عن موقع الانفجار أو التسرب فورًا.",
        "إذا كان هناك مبنى قريب، ادخل إليه واحمِ نفسك. إذا لم يكن هناك مبنى، ابحث عن أي جسم صلب يوفر لك بعض الحماية مثل جدار أو نفق.",
        "استخدم قطعة قماش لتغطية أنفك وفمك لحماية نفسك من الغبار أو المواد الكيميائية.",
        "تجنب استنشاق الغازات أو الاقتراب من المواد المكشوفة.",
        "لا تحاول الهروب بالسيارة فقد يؤدي الازدحام إلى تفاقم الوضع.",
        "لا تستخدم الهاتف أو الكهرباء في محيط التسرب."
    ],
    "MEDICAL": [
        "حافظ على هدوئك وطمئن المصاب إن أمكن.",
        "لا تعطي المصاب أي طعام أو شراب.",
        "افتح مجرى الهواء إذا كان المصاب فاقدًا للوعي.",
        "قدم الإسعافات الأولية الأساسية إن أمكن.",
        "راقب العلامات الحيوية حتى وصول المساعدة.",
        "لا تحاول معالجة الحالات الخطيرة بنفسك إن لم تكن مدربًا."
    ],
    "POLICE": [
        "لا تحاول مواجهة السارق.",
        "لا تقم بأي عمل من شأنه تعريض سلامتك أو سلامة من معك إلى خطر.",
        "حافظ على هدوئك قدر الإمكان فهذا يساعدك على الخروج بأقل خسائر ممكنة.",
        "حاول حفظ ملامح الجاني واتجاه هروبه.",
        "لا تلمس أي شيء في موقع السرقة للحفاظ على الأدلة.",
        "احتمِ في مكان آمن ولا تتدخل.",
        "أغلق الأبواب والنوافذ إذا كنت في المنزل أو متجر.",
        "لا تحاول تصوير أو مطاردة الأشخاص المسلحين.",
        "قم بتدوين تفاصيل مهمة مثل الشهود أو الظروف المحيطة."
    ]
}

# =============================================================>
@tool
def get_safety_tips(input_text: str) -> str:
    """
    يُرجع نصائح السلامة المناسبة بناءً على نوع البلاغ ونوعه الفرعي ونص البلاغ.
    يرجع JSON فقط يحتوي قائمة نصائح السلامة.
    """
    user_input_match = re.search(r"بلاغ المستخدم:\s*(.*)", input_text)
    emergency_type_match = re.search(r"نوع الطارئ:\s*(.*)", input_text)
    emergency_subtype_match = re.search(r"النوع الفرعي:\s*(.*)", input_text)
    
    user_input = user_input_match.group(1).strip() if user_input_match else ""
    emergency_type = emergency_type_match.group(1).strip() if emergency_type_match else "UNKNOWN"
    emergency_subtype = emergency_subtype_match.group(1).strip() if emergency_subtype_match else ""
    
    tips_example_list = emergency_tips.get(emergency_type, ["لا توجد نصائح متوفرة لهذا النوع من الطوارئ."])
    tips_prompt = "\n".join([f"- {tip}" for tip in tips_example_list])
    
    prompt = f"""
أنت مساعد طوارئ ذكي متخصص في تقديم إرشادات السلامة والإسعافات الأولية. 
أنت هنا لمساعدة المستخدم في أوقات الطوارئ وتقديم النصائح المناسبة التي قد تنقذ الأرواح.

🔍 **تفاصيل البلاغ:**
- المستخدم أبلغ عن: {user_input}
- نوع الطارئ: {emergency_type}
- النوع الفرعي: {emergency_subtype}

📋 **قائمة الإرشادات المقترحة بناءً على نوع الطارئ:**
{tips_prompt}

🎯 **المطلوب منك:**
يرجى تحليل الموقف وتقديم نصائح السلامة الأكثر ملاءمة وواقعية لهذه الحالة المحددة. 
ركز على النصائح العملية التي يمكن للمستخدم تطبيقها فورًا.

✅ **طريقة الرد:**
- أجب فقط بقائمة JSON تحتوي على نصائح السلامة المناسبة
- استخدم لغة واضحة ومباشرة وسهلة الفهم
- رتب النصائح حسب الأولوية والأهمية
- تأكد من أن النصائح واقعية وقابلة للتطبيق

📝 **مثال للرد المتوقع:**
[
"النصيحة الأولى الأكثر أهمية",
"النصيحة الثانية",
"النصيحة الثالثة"
]

⛔️ **تحذير هام:**
- لا تكتب أي شرح أو جملة خارج JSON
- لا تضيف أي نص إضافي قبل أو بعد القائمة
- التزم بشكل JSON الصحيح فقط
"""

    response = llm.invoke(prompt)
    print("[🔍 raw LLM response]:", response.content)
    
    try:
        match = re.search(r"\[.*?\]", response.content, re.DOTALL)
        if not match:
            raise ValueError("JSON list not found")
        
        safety_tips = json.loads(match.group(0))
        if isinstance(safety_tips, list) and safety_tips:
            return json.dumps(safety_tips, ensure_ascii=False)
        else:
            return json.dumps(["لا توجد نصائح متوفرة لهذا النوع من الطوارئ."], ensure_ascii=False)
    except Exception as e:
        print("[❌ parsing error]:", e)
        return json.dumps(["تعذر تحليل نصائح السلامة. يرجى إعادة المحاولة."], ensure_ascii=False)

# =============================================================>
# إنشاء العميل
get_safety_tips_agent = initialize_agent(
    tools=[get_safety_tips],
    llm=llm,
    agent=AgentType.OPENAI_FUNCTIONS,
    verbose=False,
)